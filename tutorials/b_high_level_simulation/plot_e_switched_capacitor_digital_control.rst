
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/b_high_level_simulation/plot_e_switched_capacitor_digital_control.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_b_high_level_simulation_plot_e_switched_capacitor_digital_control.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_b_high_level_simulation_plot_e_switched_capacitor_digital_control.py:


Switched-Capacitor Digital Control
==================================

In this tutorial we show how to use switched-capacitor digital control
in combination with a continuous-time system.

.. GENERATED FROM PYTHON SOURCE LINES 8-13

.. code-block:: default

    import cbadc
    import scipy
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 14-48

Integration Node
----------------

Initially we consider a integration node as shown in the figure below.

.. image:: /images/RC-amp.svg
   :width: 500
   :align: center
   :alt: The RC integrator with switched-capacitor digital control.

Which is goverened by the differential equations

:math:`\dot{v}_{x_{\ell}}(t) = \frac{1}{C_{x_{\ell}}} \left( \frac{v_{\Gamma_{\ell}}(t) - v_{s_\ell}(t)}{R_{s}} - \frac{1}{R_{\beta_\ell}}  v_{x_{\ell - 1}}(t) \right)`

:math:`\dot{v}_{\Gamma_{\ell}}(t) = \frac{1}{2R_{s} C_{\Gamma_{\ell}}} \left( v_{s_\ell}(t) - v_{\Gamma_{\ell}}(t) \right)`

during phase :math:`\phi_1` and

:math:`\dot{v}_{x_{\ell}}(t)  =  - \frac{1}{R_{\beta_\ell} C_{x_{\ell}}} v_{x_{\ell - 1}}(t)`

:math:`\dot{v}_{\Gamma_{\ell}}(t) = - \frac{1}{2 R_{s} C_{\Gamma_{\ell}}}  v_{\Gamma_{\ell}}(t)`

during phase :math:`\bar{\phi}_1` where a full control phase :math:`T = T_{\phi_1} + T_{\bar{\phi}_1}`.

To simulate this control-bounded converter we need to specify the whole system which for this
tutorial will be a chain-of-integrators system as shown below.

.. image:: /images/chainOfIntegratorsGeneral.svg
   :width: 1500
   :align: center
   :alt: The chain-of-integrators ADC.

where the digital controls are implemented as above.
Thus the system equations can be written as

.. GENERATED FROM PYTHON SOURCE LINES 48-65

.. code-block:: default


    N = 4
    M = N

    C_x = 1e-9
    C_Gamma = C_x / 2
    R_s = 1e1
    R_beta = 1e3

    beta = 1 / (R_beta * C_x)
    T = 1 / (2 * beta)

    A = beta * np.eye(N, k=-1)
    B = np.zeros(N)
    B[0] = beta
    CT = np.eye(N)








.. GENERATED FROM PYTHON SOURCE LINES 66-84

Simplifying the Differential Equation
-------------------------------------

Due to the virtual ground of the op-amp integrator we can treat the
second differential equation (the one involving :math:`v_{\Gamma_\ell}(t)`)
seperately. Specifically, if we assume the
capacitor :math:`C_{\Gamma}` empties completely during :math:`\bar{\phi}_1`,
and that :math:`v_{s_\ell} = \{\pm 1\}` for all :math:`t`, the digital
control's effect on the analog system can be written as

:math:`v_{\Gamma_\ell}(t) - v_{s_\ell}(t) = v_{s_\ell}(t) \cdot e^{-t/\tau}`

where :math:`\tau=R_s C_{\Gamma_\ell}`.

This can be modeled by instantiating the digital control
:class:`cbadc.digital_control.DigitalControl`
using the impulse response :func:`cbadc.digital_control.RCImpulseResponse`
as

.. GENERATED FROM PYTHON SOURCE LINES 84-98

.. code-block:: default


    impulse_response = cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma)
    digital_control_sc = cbadc.digital_control.DigitalControl(
        cbadc.analog_signal.Clock(T), M, impulse_response=impulse_response
    )

    Gamma = 1 / (R_s * C_x) * np.eye(M)
    Gamma_tildeT = -np.eye(M)

    analog_system_sc = cbadc.analog_system.AnalogSystem(A, B, CT, Gamma, Gamma_tildeT)

    print(digital_control_sc)
    print(analog_system_sc)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ================================================================================

    The Digital Control is parameterized as:

    --------------------------------------------------------------------------------

    clock:
    Analog signal returns constant 0, i.e., maps t |-> 0.

    M:
    4
    ================================================================================
        
    The analog system is parameterized as:
    A =
    [[ 0.00e+00  0.00e+00  0.00e+00  0.00e+00]
     [ 1.00e+06  0.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  1.00e+06  0.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  1.00e+06  0.00e+00]],
    B =
    [[ 1.00e+06]
     [ 0.00e+00]
     [ 0.00e+00]
     [ 0.00e+00]],
    CT = 
    [[ 1.00e+00  0.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  1.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  1.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  0.00e+00  1.00e+00]],
    Gamma =
    [[ 1.00e+08  0.00e+00  0.00e+00  0.00e+00]
     [ 0.00e+00  1.00e+08  0.00e+00  0.00e+00]
     [ 0.00e+00  0.00e+00  1.00e+08  0.00e+00]
     [ 0.00e+00  0.00e+00  0.00e+00  1.00e+08]],
    Gamma_tildeT =
    [[-1.00e+00 -0.00e+00 -0.00e+00 -0.00e+00]
     [-0.00e+00 -1.00e+00 -0.00e+00 -0.00e+00]
     [-0.00e+00 -0.00e+00 -1.00e+00 -0.00e+00]
     [-0.00e+00 -0.00e+00 -0.00e+00 -1.00e+00]], and D=[[ 0.00e+00]
     [ 0.00e+00]
     [ 0.00e+00]
     [ 0.00e+00]]




.. GENERATED FROM PYTHON SOURCE LINES 99-102

Visualizing the State Trajectories
----------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 102-155

.. code-block:: default

    OSR = 32
    amplitude = 1.0
    analog_signal = cbadc.analog_signal.Sinusoidal(amplitude, 1 / T / (OSR << 4))
    Ts = T / 100.0
    size = 1 << 12

    simulator_sc = cbadc.simulator.extended_simulation_result(
        cbadc.simulator.get_simulator(
            analog_system_sc,
            digital_control_sc,
            [analog_signal],
            cbadc.analog_signal.Clock(Ts),
            simulator_type=cbadc.simulator.SimulatorType.analytical,
        )
    )


    analog_system_ref = cbadc.analog_system.AnalogSystem(
        A, B, CT, np.eye(N) * beta, Gamma_tildeT
    )
    digital_control_ref = cbadc.digital_control.DigitalControl(
        cbadc.analog_signal.Clock(T), M
    )
    simulator_ref = cbadc.simulator.extended_simulation_result(
        cbadc.simulator.get_simulator(
            analog_system_ref,
            digital_control_ref,
            [analog_signal],
            cbadc.analog_signal.Clock(Ts),
            simulator_type=cbadc.simulator.SimulatorType.analytical,
        )
    )

    states = np.zeros((size, N))
    states_ref = np.zeros_like(states)
    t = Ts * np.arange(size)

    # Simulations
    for time_step in cbadc.utilities.show_status(range(size)):
        states[time_step, :] = next(simulator_sc)["analog_state"]
        states_ref[time_step, :] = next(simulator_ref)["analog_state"]

    # Plot state trajectories
    for index in range(N):
        plt.figure()
        plt.title("Analog state trajectories for " + f"$x_{index + 1}(t)$")
        plt.plot(t / T, states[:, index], label="SC")
        plt.plot(t / T, states_ref[:, index], label="ref")
        plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
        plt.xlabel("$t/T$")
        plt.legend()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_001.png
         :alt: Analog state trajectories for $x_1(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_002.png
         :alt: Analog state trajectories for $x_2(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_003.png
         :alt: Analog state trajectories for $x_3(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_004.png
         :alt: Analog state trajectories for $x_4(t)$
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/4096 [00:00<?, ?it/s]      6%|6         | 264/4096 [00:00<00:01, 2636.28it/s]     13%|#2        | 528/4096 [00:00<00:01, 2631.86it/s]     19%|#9        | 792/4096 [00:00<00:01, 2626.10it/s]     26%|##5       | 1055/4096 [00:00<00:01, 2626.17it/s]     32%|###2      | 1318/4096 [00:00<00:01, 2624.12it/s]     39%|###8      | 1581/4096 [00:00<00:00, 2623.83it/s]     45%|####5     | 1844/4096 [00:00<00:00, 2624.69it/s]     51%|#####1    | 2107/4096 [00:00<00:00, 2619.65it/s]     58%|#####7    | 2369/4096 [00:00<00:00, 2606.55it/s]     64%|######4   | 2630/4096 [00:01<00:00, 2590.99it/s]     71%|#######   | 2891/4096 [00:01<00:00, 2596.08it/s]     77%|#######7  | 3155/4096 [00:01<00:00, 2607.49it/s]     83%|########3 | 3419/4096 [00:01<00:00, 2615.74it/s]     90%|########9 | 3683/4096 [00:01<00:00, 2620.96it/s]     96%|#########6| 3947/4096 [00:01<00:00, 2623.97it/s]    100%|##########| 4096/4096 [00:01<00:00, 2618.13it/s]




.. GENERATED FROM PYTHON SOURCE LINES 156-159

Filter Coefficients
----------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 159-273

.. code-block:: default

    K1 = 1 << 8
    K2 = K1
    eta2 = (
        np.linalg.norm(
            analog_system_sc.transfer_function_matrix(np.array([2 * np.pi / T / OSR]))
        ).flatten()
        ** 2
    )

    # prepending an anti-aliasing filter
    # omega_3dB = 2 * np.pi / T / 16
    # wp = omega_3dB / 2.0
    # ws = omega_3dB
    # gpass = 1.0
    # gstop = 60
    # filter = cbadc.analog_system.IIRDesign(wp, ws, gpass, gstop, ftype="ellip")

    # Post-filtering FIR filter
    fir_filter_numtaps = K1 + K2
    f_cutoff = 1.0 / OSR * 2
    fir_filter = scipy.signal.firwin(fir_filter_numtaps, f_cutoff)


    digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
        # cbadc.analog_system.chain([filter, analog_system_sc]),
        analog_system_sc,
        digital_control_sc,
        eta2,
        K1,
        K2,
    )

    # Apply FIR filter
    digital_estimator_sc.convolve(fir_filter)

    digital_estimator_ref = cbadc.digital_estimator.FIRFilter(
        # cbadc.analog_system.chain([filter, analog_system_ref]),
        analog_system_ref,
        digital_control_ref,
        eta2,
        K1,
        K2,
    )

    # Apply FIR filter
    digital_estimator_ref.convolve(fir_filter)

    plt.figure()
    plt.semilogy(
        np.arange(-K1, K2),
        np.linalg.norm(np.array(digital_estimator_sc.h[0, :, :]), axis=1)[:],
        label="Switched Capacitor Filter",
    )
    plt.semilogy(
        np.arange(-K1, K2),
        np.linalg.norm(np.array(digital_estimator_ref.h[0, :, :]), axis=1)[:],
        label="Ref Filter",
    )

    plt.legend()
    plt.xlabel("filter tap k")
    plt.ylabel("$|| \mathbf{h} [k]||_2$")
    plt.xlim((-K1, K2))
    # plt.ylim((1e-16, 1))
    plt.grid(which="both")

    # Logspace frequencies
    frequencies = np.logspace(-3, 0, 100)
    omega = 4 * np.pi * beta * frequencies

    plt.figure()
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(np.abs(digital_estimator_sc.signal_transfer_function(omega))).flatten(),
        label="$STF(\omega)$ SC",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(np.abs(digital_estimator_ref.signal_transfer_function(omega))).flatten(),
        label="$STF(\omega)$ ref",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(
            np.linalg.norm(
                digital_estimator_sc.noise_transfer_function(omega)[:, 0, :], axis=0
            )
        ),
        "--",
        label="$ || NTF(\omega) ||_2 $ SC",
    )
    plt.semilogx(
        omega / (2 * np.pi),
        20
        * np.log10(
            np.linalg.norm(
                digital_estimator_ref.noise_transfer_function(omega)[:, 0, :], axis=0
            )
        ),
        "--",
        label="$ || NTF(\omega) ||_2 $ ref",
    )
    # Add labels and legends to figure
    plt.legend()
    plt.grid(which="both")
    plt.title("Signal and noise transfer functions")
    plt.xlabel("$f$ [Hz]")
    plt.ylabel("dB")
    # plt.xlim((1e2, 5e3))
    plt.gcf().tight_layout()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_005.png
         :alt: plot e switched capacitor digital control
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_005.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_006.png
         :alt: Signal and noise transfer functions
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_006.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 274-278

Mismatch Sensitivity to Switch Resistance
-----------------------------------------



.. GENERATED FROM PYTHON SOURCE LINES 278-351

.. code-block:: default


    mismatch_in_percent = np.arange(3) * 10

    size = 1 << 14
    t = np.arange(size) * T

    estimates = []

    for mismatch in mismatch_in_percent:
        digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_sc]),
            analog_system_sc,
            cbadc.digital_control.DigitalControl(
                cbadc.analog_signal.Clock(T),
                M,
                impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
            ),
            eta2,
            K1,
            K2,
        )

        # Apply FIR filter
        digital_estimator_sc.convolve(fir_filter)

        digital_estimator_sc(
            cbadc.simulator.get_simulator(
                cbadc.analog_system.AnalogSystem(
                    A,
                    B,
                    CT,
                    1 / ((1 + mismatch / 100) * R_s * C_x) * np.eye(M),
                    Gamma_tildeT,
                ),
                cbadc.digital_control.DigitalControl(
                    cbadc.analog_signal.Clock(T),
                    M,
                    impulse_response=cbadc.analog_signal.RCImpulseResponse(
                        (1 + mismatch / 100) * R_s * C_Gamma
                    ),
                ),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )
        u_hat = np.zeros(size)
        for index in cbadc.utilities.show_status(range(size)):
            u_hat[index] = next(digital_estimator_sc)
        estimates.append(u_hat)

    # Plot estimates in time domain
    plt.figure()
    plt.title("Estimates")
    for index, mismatch in enumerate(mismatch_in_percent):
        plt.plot(t / T, estimates[index], label=f"Mismatch R_s {mismatch}%")
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 100))
    plt.legend()

    # Plot estimates PSD
    plt.figure()
    plt.title("Estimates PSD")
    for index, mismatch in enumerate(mismatch_in_percent):
        f, psd = cbadc.utilities.compute_power_spectral_density(
            estimates[index][K1 + K2 :], fs=1.0 / T
        )
        plt.semilogx(f, 10 * np.log10(psd), label=f"Mismatch R_s {mismatch}%")
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("f [Hz]")
    plt.ylabel("V^2/Hz [dB]")
    plt.legend()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_007.png
         :alt: Estimates
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_008.png
         :alt: Estimates PSD
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_008.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/16384 [00:00<?, ?it/s]      3%|2         | 482/16384 [00:00<00:03, 4814.52it/s]      6%|5         | 966/16384 [00:00<00:03, 4824.06it/s]      9%|8         | 1450/16384 [00:00<00:03, 4830.54it/s]     12%|#1        | 1935/16384 [00:00<00:02, 4835.51it/s]     15%|#4        | 2419/16384 [00:00<00:02, 4826.97it/s]     18%|#7        | 2910/16384 [00:00<00:02, 4853.18it/s]     21%|##        | 3405/16384 [00:00<00:02, 4882.67it/s]     24%|##3       | 3894/16384 [00:00<00:02, 4880.90it/s]     27%|##6       | 4388/16384 [00:00<00:02, 4898.46it/s]     30%|##9       | 4881/16384 [00:01<00:02, 4904.42it/s]     33%|###2      | 5372/16384 [00:01<00:02, 4875.87it/s]     36%|###5      | 5861/16384 [00:01<00:02, 4879.56it/s]     39%|###8      | 6354/16384 [00:01<00:02, 4893.53it/s]     42%|####1     | 6848/16384 [00:01<00:01, 4905.53it/s]     45%|####4     | 7340/16384 [00:01<00:01, 4909.48it/s]     48%|####7     | 7835/16384 [00:01<00:01, 4919.00it/s]     51%|#####     | 8328/16384 [00:01<00:01, 4919.48it/s]     54%|#####3    | 8820/16384 [00:01<00:01, 4917.60it/s]     57%|#####6    | 9312/16384 [00:01<00:01, 4917.83it/s]     60%|#####9    | 9806/16384 [00:02<00:01, 4923.73it/s]     63%|######2   | 10299/16384 [00:02<00:01, 4918.59it/s]     66%|######5   | 10791/16384 [00:02<00:01, 4908.92it/s]     69%|######8   | 11282/16384 [00:02<00:01, 4843.04it/s]     72%|#######1  | 11770/16384 [00:02<00:00, 4852.96it/s]     75%|#######4  | 12259/16384 [00:02<00:00, 4863.37it/s]     78%|#######7  | 12752/16384 [00:02<00:00, 4883.10it/s]     81%|########  | 13244/16384 [00:02<00:00, 4894.10it/s]     84%|########3 | 13739/16384 [00:02<00:00, 4909.87it/s]     87%|########6 | 14234/16384 [00:02<00:00, 4920.63it/s]     90%|########9 | 14727/16384 [00:03<00:00, 4918.59it/s]     93%|#########2| 15222/16384 [00:03<00:00, 4926.92it/s]     96%|#########5| 15717/16384 [00:03<00:00, 4931.86it/s]     99%|#########8| 16211/16384 [00:03<00:00, 4930.00it/s]    100%|##########| 16384/16384 [00:03<00:00, 4895.09it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      3%|2         | 490/16384 [00:00<00:03, 4893.89it/s]      6%|5         | 983/16384 [00:00<00:03, 4910.33it/s]      9%|9         | 1475/16384 [00:00<00:03, 4894.02it/s]     12%|#1        | 1965/16384 [00:00<00:02, 4886.60it/s]     15%|#4        | 2454/16384 [00:00<00:02, 4885.36it/s]     18%|#7        | 2943/16384 [00:00<00:02, 4883.24it/s]     21%|##        | 3433/16384 [00:00<00:02, 4886.59it/s]     24%|##3       | 3931/16384 [00:00<00:02, 4914.30it/s]     27%|##7       | 4428/16384 [00:00<00:02, 4930.37it/s]     30%|###       | 4925/16384 [00:01<00:02, 4941.86it/s]     33%|###3      | 5422/16384 [00:01<00:02, 4949.45it/s]     36%|###6      | 5919/16384 [00:01<00:02, 4954.93it/s]     39%|###9      | 6416/16384 [00:01<00:02, 4958.71it/s]     42%|####2     | 6914/16384 [00:01<00:01, 4962.17it/s]     45%|####5     | 7411/16384 [00:01<00:01, 4964.28it/s]     48%|####8     | 7909/16384 [00:01<00:01, 4967.50it/s]     51%|#####1    | 8407/16384 [00:01<00:01, 4969.97it/s]     54%|#####4    | 8905/16384 [00:01<00:01, 4970.74it/s]     57%|#####7    | 9403/16384 [00:01<00:01, 4970.37it/s]     60%|######    | 9901/16384 [00:02<00:01, 4971.19it/s]     63%|######3   | 10399/16384 [00:02<00:01, 4972.52it/s]     67%|######6   | 10897/16384 [00:02<00:01, 4972.37it/s]     70%|######9   | 11395/16384 [00:02<00:01, 4972.19it/s]     73%|#######2  | 11893/16384 [00:02<00:00, 4952.05it/s]     76%|#######5  | 12390/16384 [00:02<00:00, 4955.60it/s]     79%|#######8  | 12887/16384 [00:02<00:00, 4959.70it/s]     82%|########1 | 13383/16384 [00:02<00:00, 4958.81it/s]     85%|########4 | 13881/16384 [00:02<00:00, 4963.46it/s]     88%|########7 | 14379/16384 [00:02<00:00, 4965.75it/s]     91%|######### | 14877/16384 [00:03<00:00, 4969.40it/s]     94%|#########3| 15375/16384 [00:03<00:00, 4972.34it/s]     97%|#########6| 15873/16384 [00:03<00:00, 4974.05it/s]    100%|#########9| 16371/16384 [00:03<00:00, 4975.70it/s]    100%|##########| 16384/16384 [00:03<00:00, 4951.64it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      3%|2         | 483/16384 [00:00<00:03, 4825.03it/s]      6%|5         | 966/16384 [00:00<00:03, 4756.36it/s]      9%|8         | 1445/16384 [00:00<00:03, 4769.48it/s]     12%|#1        | 1927/16384 [00:00<00:03, 4787.91it/s]     15%|#4        | 2406/16384 [00:00<00:02, 4768.67it/s]     18%|#7        | 2897/16384 [00:00<00:02, 4815.36it/s]     21%|##        | 3392/16384 [00:00<00:02, 4856.15it/s]     24%|##3       | 3888/16384 [00:00<00:02, 4886.55it/s]     27%|##6       | 4384/16384 [00:00<00:02, 4906.42it/s]     30%|##9       | 4879/16384 [00:01<00:02, 4918.92it/s]     33%|###2      | 5374/16384 [00:01<00:02, 4928.28it/s]     36%|###5      | 5870/16384 [00:01<00:02, 4935.41it/s]     39%|###8      | 6365/16384 [00:01<00:02, 4939.71it/s]     42%|####1     | 6859/16384 [00:01<00:01, 4937.93it/s]     45%|####4     | 7353/16384 [00:01<00:01, 4852.40it/s]     48%|####7     | 7839/16384 [00:01<00:01, 4840.78it/s]     51%|#####     | 8334/16384 [00:01<00:01, 4870.93it/s]     54%|#####3    | 8829/16384 [00:01<00:01, 4893.81it/s]     57%|#####6    | 9324/16384 [00:01<00:01, 4908.17it/s]     60%|#####9    | 9815/16384 [00:02<00:01, 4871.33it/s]     63%|######2   | 10303/16384 [00:02<00:01, 4873.11it/s]     66%|######5   | 10796/16384 [00:02<00:01, 4888.04it/s]     69%|######8   | 11291/16384 [00:02<00:01, 4904.97it/s]     72%|#######1  | 11786/16384 [00:02<00:00, 4917.04it/s]     75%|#######4  | 12282/16384 [00:02<00:00, 4927.54it/s]     78%|#######7  | 12775/16384 [00:02<00:00, 4925.55it/s]     81%|########  | 13270/16384 [00:02<00:00, 4931.91it/s]     84%|########4 | 13765/16384 [00:02<00:00, 4936.48it/s]     87%|########7 | 14259/16384 [00:02<00:00, 4923.98it/s]     90%|######### | 14754/16384 [00:03<00:00, 4930.23it/s]     93%|#########3| 15250/16384 [00:03<00:00, 4936.89it/s]     96%|#########6| 15746/16384 [00:03<00:00, 4940.90it/s]     99%|#########9| 16242/16384 [00:03<00:00, 4944.65it/s]    100%|##########| 16384/16384 [00:03<00:00, 4896.58it/s]

    <matplotlib.legend.Legend object at 0x2872f31f0>



.. GENERATED FROM PYTHON SOURCE LINES 352-355

Clock Jitter Sensitivity
------------------------


.. GENERATED FROM PYTHON SOURCE LINES 355-483

.. code-block:: default

    jitter_std = np.power(10.0, np.arange(-6, 0)) * T
    # jitter_std = np.arange(3) * T * 0.3
    clock_jitter = [lambda: (np.random.random() - 0.5) * std for std in jitter_std]

    size = 1 << 14
    t = np.arange(size) * T

    estimates = []
    estimates_ref = []

    for jitter in clock_jitter:
        digital_estimator_sc = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_sc]),
            analog_system_sc,
            cbadc.digital_control.DigitalControl(
                cbadc.analog_signal.Clock(T),
                M,
                impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
            ),
            eta2,
            K1,
            K2,
            solver_type=cbadc.digital_estimator.FilterComputationBackend.mpmath,
        )

        # Apply FIR filter
        # digital_estimator_sc.convolve(fir_filter)

        digital_estimator_sc(
            cbadc.simulator.get_simulator(
                analog_system_sc,
                cbadc.digital_control.DigitalControl(
                    cbadc.analog_signal.Clock(T),
                    M,
                    impulse_response=cbadc.analog_signal.RCImpulseResponse(R_s * C_Gamma),
                ),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )

        digital_estimator_ref = cbadc.digital_estimator.FIRFilter(
            # cbadc.analog_system.chain([filter, analog_system_ref]),
            analog_system_ref,
            cbadc.digital_control.DigitalControl(cbadc.analog_signal.Clock(T), M),
            eta2,
            K1,
            K2,
            solver_type=cbadc.digital_estimator.FilterComputationBackend.mpmath,
        )

        # Apply FIR filter
        # digital_estimator_ref.convolve(fir_filter)

        digital_estimator_ref(
            cbadc.simulator.get_simulator(
                analog_system_ref,
                cbadc.digital_control.DigitalControl(cbadc.analog_signal.Clock(T), M),
                [analog_signal],
                simulator_type=cbadc.simulator.SimulatorType.analytical,
            )
        )

        u_hat = np.zeros(size)
        u_hat_ref = np.zeros_like(u_hat)
        digital_estimator_sc.warm_up()
        digital_estimator_ref.warm_up()
        for index in cbadc.utilities.show_status(range(size)):
            u_hat[index] = next(digital_estimator_sc)
            u_hat_ref[index] = next(digital_estimator_ref)
        estimates.append(u_hat)
        estimates_ref.append(u_hat_ref)

    # Plot estimates in time domain
    plt.figure()
    plt.title("Estimates")
    for index, jitter in enumerate(clock_jitter):
        plt.plot(
            t / T,
            estimates[index],
            label=f"Std / T = {np.round(jitter_std[index] / T * 100, 3)}%",
        )
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 1000))
    plt.legend()

    # Plot estimates in time domain
    plt.figure()
    plt.title("Ref Estimates")
    for index, jitter in enumerate(clock_jitter):
        plt.plot(
            t / T,
            estimates_ref[index],
            label=f"Ref Std / T = {np.round(jitter_std[index] / T * 100, 3)}%",
        )
    plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
    plt.xlabel("$t/T$")
    plt.xlim((K1 + K2, K1 + K2 + 1000))
    plt.legend()


    # Plot estimates PSD
    for index, jitter in enumerate(clock_jitter):
        plt.figure()
        plt.title("Estimates PSD Clock Jitter")

        f, psd = cbadc.utilities.compute_power_spectral_density(
            estimates[index][K1 + K2 :], fs=1.0 / T
        )
        f_ref, psd_ref = cbadc.utilities.compute_power_spectral_density(
            estimates_ref[index][K1 + K2 :], fs=1.0 / T
        )
        plt.semilogx(
            f,
            10 * np.log10(psd),
            label=f"SC (Std/T) = +- {np.round(jitter_std[index] / T * 100, 3)}%",
        )
        plt.semilogx(
            f_ref,
            10 * np.log10(psd_ref),
            "--",
            label=f"Ref (Std/T) = +- {np.round(jitter_std[index] / T  * 100, 3)}%",
        )
        plt.grid(visible=True, which="major", color="gray", alpha=0.6, lw=1.5)
        plt.xlabel("f [Hz]")
        plt.ylabel("V^2/Hz [dB]")
        plt.legend()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_009.png
         :alt: Estimates
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_010.png
         :alt: Ref Estimates
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_011.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_011.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_012.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_012.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_013.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_013.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_014.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_014.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_015.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_015.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_016.png
         :alt: Estimates PSD Clock Jitter
         :srcset: /tutorials/b_high_level_simulation/images/sphx_glr_plot_e_switched_capacitor_digital_control_016.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 246/16384 [00:00<00:06, 2450.15it/s]      3%|3         | 493/16384 [00:00<00:06, 2459.97it/s]      5%|4         | 739/16384 [00:00<00:06, 2459.86it/s]      6%|6         | 987/16384 [00:00<00:06, 2466.09it/s]      8%|7         | 1234/16384 [00:00<00:06, 2451.73it/s]      9%|9         | 1482/16384 [00:00<00:06, 2460.30it/s]     11%|#         | 1729/16384 [00:00<00:05, 2463.14it/s]     12%|#2        | 1976/16384 [00:00<00:05, 2460.44it/s]     14%|#3        | 2223/16384 [00:00<00:05, 2442.97it/s]     15%|#5        | 2471/16384 [00:01<00:05, 2451.72it/s]     17%|#6        | 2717/16384 [00:01<00:05, 2444.66it/s]     18%|#8        | 2964/16384 [00:01<00:05, 2450.45it/s]     20%|#9        | 3211/16384 [00:01<00:05, 2455.33it/s]     21%|##1       | 3458/16384 [00:01<00:05, 2459.62it/s]     23%|##2       | 3705/16384 [00:01<00:05, 2462.63it/s]     24%|##4       | 3952/16384 [00:01<00:05, 2464.44it/s]     26%|##5       | 4199/16384 [00:01<00:04, 2460.78it/s]     27%|##7       | 4446/16384 [00:01<00:04, 2429.49it/s]     29%|##8       | 4694/16384 [00:01<00:04, 2442.11it/s]     30%|###       | 4942/16384 [00:02<00:04, 2451.10it/s]     32%|###1      | 5191/16384 [00:02<00:04, 2459.91it/s]     33%|###3      | 5439/16384 [00:02<00:04, 2463.63it/s]     35%|###4      | 5688/16384 [00:02<00:04, 2468.51it/s]     36%|###6      | 5936/16384 [00:02<00:04, 2470.27it/s]     38%|###7      | 6184/16384 [00:02<00:04, 2473.15it/s]     39%|###9      | 6432/16384 [00:02<00:04, 2473.08it/s]     41%|####      | 6680/16384 [00:02<00:03, 2474.46it/s]     42%|####2     | 6928/16384 [00:02<00:03, 2465.62it/s]     44%|####3     | 7176/16384 [00:02<00:03, 2468.32it/s]     45%|####5     | 7423/16384 [00:03<00:03, 2466.92it/s]     47%|####6     | 7670/16384 [00:03<00:03, 2465.88it/s]     48%|####8     | 7917/16384 [00:03<00:03, 2452.93it/s]     50%|####9     | 8163/16384 [00:03<00:03, 2449.90it/s]     51%|#####1    | 8409/16384 [00:03<00:03, 2441.33it/s]     53%|#####2    | 8654/16384 [00:03<00:03, 2437.82it/s]     54%|#####4    | 8898/16384 [00:03<00:03, 2434.14it/s]     56%|#####5    | 9142/16384 [00:03<00:02, 2429.99it/s]     57%|#####7    | 9386/16384 [00:03<00:02, 2416.77it/s]     59%|#####8    | 9632/16384 [00:03<00:02, 2429.34it/s]     60%|######    | 9878/16384 [00:04<00:02, 2438.23it/s]     62%|######1   | 10126/16384 [00:04<00:02, 2449.12it/s]     63%|######3   | 10374/16384 [00:04<00:02, 2456.11it/s]     65%|######4   | 10621/16384 [00:04<00:02, 2459.20it/s]     66%|######6   | 10867/16384 [00:04<00:02, 2439.22it/s]     68%|######7   | 11111/16384 [00:04<00:02, 2437.86it/s]     69%|######9   | 11356/16384 [00:04<00:02, 2438.51it/s]     71%|#######   | 11600/16384 [00:04<00:01, 2435.86it/s]     72%|#######2  | 11845/16384 [00:04<00:01, 2439.46it/s]     74%|#######3  | 12089/16384 [00:04<00:01, 2434.90it/s]     75%|#######5  | 12336/16384 [00:05<00:01, 2442.74it/s]     77%|#######6  | 12581/16384 [00:05<00:01, 2435.96it/s]     78%|#######8  | 12825/16384 [00:05<00:01, 2434.73it/s]     80%|#######9  | 13069/16384 [00:05<00:01, 2430.59it/s]     81%|########1 | 13313/16384 [00:05<00:01, 2431.84it/s]     83%|########2 | 13557/16384 [00:05<00:01, 2429.62it/s]     84%|########4 | 13801/16384 [00:05<00:01, 2430.82it/s]     86%|########5 | 14045/16384 [00:05<00:00, 2429.66it/s]     87%|########7 | 14291/16384 [00:05<00:00, 2438.35it/s]     89%|########8 | 14538/16384 [00:05<00:00, 2447.24it/s]     90%|######### | 14786/16384 [00:06<00:00, 2456.67it/s]     92%|#########1| 15034/16384 [00:06<00:00, 2462.34it/s]     93%|#########3| 15283/16384 [00:06<00:00, 2468.12it/s]     95%|#########4| 15531/16384 [00:06<00:00, 2470.38it/s]     96%|#########6| 15779/16384 [00:06<00:00, 2472.98it/s]     98%|#########7| 16027/16384 [00:06<00:00, 2473.18it/s]     99%|#########9| 16275/16384 [00:06<00:00, 2474.68it/s]    100%|##########| 16384/16384 [00:06<00:00, 2452.08it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 246/16384 [00:00<00:06, 2459.80it/s]      3%|3         | 496/16384 [00:00<00:06, 2478.68it/s]      5%|4         | 745/16384 [00:00<00:06, 2483.55it/s]      6%|6         | 995/16384 [00:00<00:06, 2489.15it/s]      8%|7         | 1245/16384 [00:00<00:06, 2491.64it/s]      9%|9         | 1496/16384 [00:00<00:05, 2496.39it/s]     11%|#         | 1746/16384 [00:00<00:05, 2496.00it/s]     12%|#2        | 1997/16384 [00:00<00:05, 2499.12it/s]     14%|#3        | 2247/16384 [00:00<00:05, 2488.41it/s]     15%|#5        | 2498/16384 [00:01<00:05, 2492.07it/s]     17%|#6        | 2748/16384 [00:01<00:05, 2493.24it/s]     18%|#8        | 2999/16384 [00:01<00:05, 2495.95it/s]     20%|#9        | 3249/16384 [00:01<00:05, 2496.97it/s]     21%|##1       | 3500/16384 [00:01<00:05, 2498.53it/s]     23%|##2       | 3751/16384 [00:01<00:05, 2499.06it/s]     24%|##4       | 4002/16384 [00:01<00:04, 2500.25it/s]     26%|##5       | 4253/16384 [00:01<00:04, 2499.94it/s]     27%|##7       | 4504/16384 [00:01<00:04, 2500.57it/s]     29%|##9       | 4755/16384 [00:01<00:04, 2499.87it/s]     31%|###       | 5005/16384 [00:02<00:04, 2499.88it/s]     32%|###2      | 5256/16384 [00:02<00:04, 2500.42it/s]     34%|###3      | 5507/16384 [00:02<00:04, 2499.13it/s]     35%|###5      | 5758/16384 [00:02<00:04, 2499.86it/s]     37%|###6      | 6008/16384 [00:02<00:04, 2499.79it/s]     38%|###8      | 6258/16384 [00:02<00:04, 2499.78it/s]     40%|###9      | 6508/16384 [00:02<00:03, 2499.60it/s]     41%|####1     | 6758/16384 [00:02<00:03, 2491.15it/s]     43%|####2     | 7008/16384 [00:02<00:03, 2491.70it/s]     44%|####4     | 7259/16384 [00:02<00:03, 2495.38it/s]     46%|####5     | 7509/16384 [00:03<00:03, 2493.79it/s]     47%|####7     | 7760/16384 [00:03<00:03, 2495.87it/s]     49%|####8     | 8010/16384 [00:03<00:03, 2493.06it/s]     50%|#####     | 8260/16384 [00:03<00:03, 2494.30it/s]     52%|#####1    | 8510/16384 [00:03<00:03, 2493.54it/s]     53%|#####3    | 8760/16384 [00:03<00:03, 2491.63it/s]     55%|#####4    | 9010/16384 [00:03<00:02, 2483.69it/s]     57%|#####6    | 9261/16384 [00:03<00:02, 2489.14it/s]     58%|#####8    | 9510/16384 [00:03<00:02, 2484.36it/s]     60%|#####9    | 9761/16384 [00:03<00:02, 2489.16it/s]     61%|######1   | 10010/16384 [00:04<00:02, 2483.56it/s]     63%|######2   | 10259/16384 [00:04<00:02, 2468.48it/s]     64%|######4   | 10506/16384 [00:04<00:02, 2449.27it/s]     66%|######5   | 10752/16384 [00:04<00:02, 2450.65it/s]     67%|######7   | 11001/16384 [00:04<00:02, 2461.66it/s]     69%|######8   | 11252/16384 [00:04<00:02, 2473.44it/s]     70%|#######   | 11501/16384 [00:04<00:01, 2476.08it/s]     72%|#######1  | 11752/16384 [00:04<00:01, 2484.03it/s]     73%|#######3  | 12001/16384 [00:04<00:01, 2477.80it/s]     75%|#######4  | 12251/16384 [00:04<00:01, 2483.19it/s]     76%|#######6  | 12501/16384 [00:05<00:01, 2485.58it/s]     78%|#######7  | 12751/16384 [00:05<00:01, 2489.71it/s]     79%|#######9  | 13000/16384 [00:05<00:01, 2487.01it/s]     81%|########  | 13250/16384 [00:05<00:01, 2489.13it/s]     82%|########2 | 13499/16384 [00:05<00:01, 2487.97it/s]     84%|########3 | 13749/16384 [00:05<00:01, 2491.02it/s]     85%|########5 | 13999/16384 [00:05<00:00, 2466.87it/s]     87%|########6 | 14249/16384 [00:05<00:00, 2475.57it/s]     88%|########8 | 14499/16384 [00:05<00:00, 2480.29it/s]     90%|######### | 14748/16384 [00:05<00:00, 2480.70it/s]     92%|#########1| 14998/16384 [00:06<00:00, 2484.20it/s]     93%|#########3| 15248/16384 [00:06<00:00, 2488.12it/s]     95%|#########4| 15498/16384 [00:06<00:00, 2489.08it/s]     96%|#########6| 15749/16384 [00:06<00:00, 2493.01it/s]     98%|#########7| 15999/16384 [00:06<00:00, 2494.57it/s]     99%|#########9| 16250/16384 [00:06<00:00, 2496.62it/s]    100%|##########| 16384/16384 [00:06<00:00, 2488.93it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 247/16384 [00:00<00:06, 2469.35it/s]      3%|3         | 494/16384 [00:00<00:06, 2467.17it/s]      5%|4         | 741/16384 [00:00<00:06, 2441.98it/s]      6%|6         | 988/16384 [00:00<00:06, 2452.27it/s]      8%|7         | 1236/16384 [00:00<00:06, 2461.50it/s]      9%|9         | 1483/16384 [00:00<00:06, 2464.24it/s]     11%|#         | 1730/16384 [00:00<00:05, 2452.30it/s]     12%|#2        | 1976/16384 [00:00<00:05, 2451.91it/s]     14%|#3        | 2222/16384 [00:00<00:05, 2432.64it/s]     15%|#5        | 2471/16384 [00:01<00:05, 2447.88it/s]     17%|#6        | 2720/16384 [00:01<00:05, 2460.19it/s]     18%|#8        | 2970/16384 [00:01<00:05, 2469.63it/s]     20%|#9        | 3219/16384 [00:01<00:05, 2475.73it/s]     21%|##1       | 3468/16384 [00:01<00:05, 2478.09it/s]     23%|##2       | 3716/16384 [00:01<00:05, 2456.76it/s]     24%|##4       | 3962/16384 [00:01<00:05, 2451.67it/s]     26%|##5       | 4208/16384 [00:01<00:05, 2431.62it/s]     27%|##7       | 4452/16384 [00:01<00:04, 2391.47it/s]     29%|##8       | 4692/16384 [00:01<00:04, 2392.47it/s]     30%|###       | 4940/16384 [00:02<00:04, 2418.26it/s]     32%|###1      | 5190/16384 [00:02<00:04, 2440.12it/s]     33%|###3      | 5435/16384 [00:02<00:04, 2430.12it/s]     35%|###4      | 5679/16384 [00:02<00:04, 2419.35it/s]     36%|###6      | 5921/16384 [00:02<00:04, 2411.86it/s]     38%|###7      | 6163/16384 [00:02<00:04, 2409.72it/s]     39%|###9      | 6407/16384 [00:02<00:04, 2417.97it/s]     41%|####      | 6651/16384 [00:02<00:04, 2423.55it/s]     42%|####2     | 6895/16384 [00:02<00:03, 2427.12it/s]     44%|####3     | 7140/16384 [00:02<00:03, 2433.24it/s]     45%|####5     | 7384/16384 [00:03<00:03, 2424.52it/s]     47%|####6     | 7627/16384 [00:03<00:03, 2409.49it/s]     48%|####8     | 7868/16384 [00:03<00:03, 2404.51it/s]     49%|####9     | 8109/16384 [00:03<00:03, 2405.51it/s]     51%|#####     | 8352/16384 [00:03<00:03, 2410.86it/s]     52%|#####2    | 8594/16384 [00:03<00:03, 2412.98it/s]     54%|#####3    | 8842/16384 [00:03<00:03, 2432.03it/s]     55%|#####5    | 9087/16384 [00:03<00:02, 2434.78it/s]     57%|#####6    | 9331/16384 [00:03<00:02, 2421.07it/s]     58%|#####8    | 9574/16384 [00:03<00:02, 2419.36it/s]     60%|#####9    | 9816/16384 [00:04<00:02, 2414.82it/s]     61%|######1   | 10059/16384 [00:04<00:02, 2418.61it/s]     63%|######2   | 10304/16384 [00:04<00:02, 2426.09it/s]     64%|######4   | 10549/16384 [00:04<00:02, 2432.53it/s]     66%|######5   | 10799/16384 [00:04<00:02, 2450.54it/s]     67%|######7   | 11048/16384 [00:04<00:02, 2461.59it/s]     69%|######8   | 11298/16384 [00:04<00:02, 2472.83it/s]     70%|#######   | 11546/16384 [00:04<00:01, 2473.49it/s]     72%|#######1  | 11794/16384 [00:04<00:01, 2453.02it/s]     73%|#######3  | 12040/16384 [00:04<00:01, 2422.58it/s]     75%|#######4  | 12283/16384 [00:05<00:01, 2395.38it/s]     76%|#######6  | 12526/16384 [00:05<00:01, 2403.57it/s]     78%|#######7  | 12767/16384 [00:05<00:01, 2399.05it/s]     79%|#######9  | 13011/16384 [00:05<00:01, 2408.39it/s]     81%|########  | 13256/16384 [00:05<00:01, 2419.23it/s]     82%|########2 | 13498/16384 [00:05<00:01, 2414.04it/s]     84%|########3 | 13747/16384 [00:05<00:01, 2436.18it/s]     85%|########5 | 13991/16384 [00:05<00:00, 2432.58it/s]     87%|########6 | 14238/16384 [00:05<00:00, 2441.84it/s]     88%|########8 | 14483/16384 [00:05<00:00, 2426.81it/s]     90%|########9 | 14726/16384 [00:06<00:00, 2422.19it/s]     91%|#########1| 14969/16384 [00:06<00:00, 2413.34it/s]     93%|#########2| 15212/16384 [00:06<00:00, 2418.21it/s]     94%|#########4| 15454/16384 [00:06<00:00, 2417.14it/s]     96%|#########5| 15696/16384 [00:06<00:00, 2417.38it/s]     97%|#########7| 15941/16384 [00:06<00:00, 2424.98it/s]     99%|#########8| 16186/16384 [00:06<00:00, 2430.95it/s]    100%|##########| 16384/16384 [00:06<00:00, 2431.15it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      1%|1         | 242/16384 [00:00<00:06, 2419.90it/s]      3%|2         | 486/16384 [00:00<00:06, 2430.65it/s]      4%|4         | 730/16384 [00:00<00:06, 2431.32it/s]      6%|5         | 978/16384 [00:00<00:06, 2447.65it/s]      7%|7         | 1226/16384 [00:00<00:06, 2457.02it/s]      9%|8         | 1473/16384 [00:00<00:06, 2458.71it/s]     10%|#         | 1719/16384 [00:00<00:06, 2430.18it/s]     12%|#1        | 1963/16384 [00:00<00:05, 2406.09it/s]     13%|#3        | 2204/16384 [00:00<00:05, 2401.91it/s]     15%|#4        | 2450/16384 [00:01<00:05, 2416.72it/s]     16%|#6        | 2692/16384 [00:01<00:05, 2409.05it/s]     18%|#7        | 2939/16384 [00:01<00:05, 2427.19it/s]     19%|#9        | 3186/16384 [00:01<00:05, 2438.39it/s]     21%|##        | 3434/16384 [00:01<00:05, 2449.98it/s]     22%|##2       | 3680/16384 [00:01<00:05, 2439.27it/s]     24%|##3       | 3928/16384 [00:01<00:05, 2450.19it/s]     26%|##5       | 4178/16384 [00:01<00:04, 2462.58it/s]     27%|##7       | 4427/16384 [00:01<00:04, 2468.45it/s]     29%|##8       | 4674/16384 [00:01<00:04, 2468.16it/s]     30%|###       | 4921/16384 [00:02<00:04, 2456.51it/s]     32%|###1      | 5170/16384 [00:02<00:04, 2463.80it/s]     33%|###3      | 5417/16384 [00:02<00:04, 2462.18it/s]     35%|###4      | 5664/16384 [00:02<00:04, 2455.60it/s]     36%|###6      | 5910/16384 [00:02<00:04, 2456.76it/s]     38%|###7      | 6156/16384 [00:02<00:04, 2457.26it/s]     39%|###9      | 6402/16384 [00:02<00:04, 2429.86it/s]     41%|####      | 6648/16384 [00:02<00:03, 2438.21it/s]     42%|####2     | 6892/16384 [00:02<00:03, 2403.30it/s]     44%|####3     | 7133/16384 [00:02<00:03, 2386.04it/s]     45%|####4     | 7372/16384 [00:03<00:03, 2367.29it/s]     46%|####6     | 7610/16384 [00:03<00:03, 2370.18it/s]     48%|####7     | 7848/16384 [00:03<00:03, 2357.15it/s]     49%|####9     | 8084/16384 [00:03<00:03, 2348.26it/s]     51%|#####     | 8319/16384 [00:03<00:03, 2343.07it/s]     52%|#####2    | 8554/16384 [00:03<00:03, 2338.42it/s]     54%|#####3    | 8788/16384 [00:03<00:03, 2332.57it/s]     55%|#####5    | 9033/16384 [00:03<00:03, 2365.13it/s]     57%|#####6    | 9281/16384 [00:03<00:02, 2398.02it/s]     58%|#####8    | 9529/16384 [00:03<00:02, 2421.35it/s]     60%|#####9    | 9778/16384 [00:04<00:02, 2438.93it/s]     61%|######1   | 10026/16384 [00:04<00:02, 2450.43it/s]     63%|######2   | 10275/16384 [00:04<00:02, 2461.33it/s]     64%|######4   | 10522/16384 [00:04<00:02, 2456.75it/s]     66%|######5   | 10768/16384 [00:04<00:02, 2450.76it/s]     67%|######7   | 11014/16384 [00:04<00:02, 2446.72it/s]     69%|######8   | 11259/16384 [00:04<00:02, 2444.44it/s]     70%|#######   | 11504/16384 [00:04<00:02, 2439.97it/s]     72%|#######1  | 11749/16384 [00:04<00:01, 2439.76it/s]     73%|#######3  | 11993/16384 [00:04<00:01, 2437.23it/s]     75%|#######4  | 12237/16384 [00:05<00:01, 2437.24it/s]     76%|#######6  | 12481/16384 [00:05<00:01, 2435.07it/s]     78%|#######7  | 12725/16384 [00:05<00:01, 2433.95it/s]     79%|#######9  | 12969/16384 [00:05<00:01, 2409.54it/s]     81%|########  | 13213/16384 [00:05<00:01, 2416.34it/s]     82%|########2 | 13459/16384 [00:05<00:01, 2426.99it/s]     84%|########3 | 13707/16384 [00:05<00:01, 2440.65it/s]     85%|########5 | 13955/16384 [00:05<00:00, 2452.28it/s]     87%|########6 | 14204/16384 [00:05<00:00, 2460.78it/s]     88%|########8 | 14453/16384 [00:05<00:00, 2467.57it/s]     90%|########9 | 14701/16384 [00:06<00:00, 2471.24it/s]     91%|#########1| 14950/16384 [00:06<00:00, 2476.26it/s]     93%|#########2| 15198/16384 [00:06<00:00, 2475.40it/s]     94%|#########4| 15447/16384 [00:06<00:00, 2477.63it/s]     96%|#########5| 15696/16384 [00:06<00:00, 2478.50it/s]     97%|#########7| 15944/16384 [00:06<00:00, 2478.14it/s]     99%|#########8| 16192/16384 [00:06<00:00, 2478.27it/s]    100%|##########| 16384/16384 [00:06<00:00, 2434.66it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      1%|1         | 234/16384 [00:00<00:06, 2330.67it/s]      3%|2         | 476/16384 [00:00<00:06, 2379.62it/s]      4%|4         | 716/16384 [00:00<00:06, 2385.80it/s]      6%|5         | 961/16384 [00:00<00:06, 2410.22it/s]      7%|7         | 1204/16384 [00:00<00:06, 2416.98it/s]      9%|8         | 1446/16384 [00:00<00:06, 2416.80it/s]     10%|#         | 1688/16384 [00:00<00:06, 2390.00it/s]     12%|#1        | 1928/16384 [00:00<00:06, 2376.55it/s]     13%|#3        | 2169/16384 [00:00<00:05, 2386.07it/s]     15%|#4        | 2417/16384 [00:01<00:05, 2413.25it/s]     16%|#6        | 2664/16384 [00:01<00:05, 2429.37it/s]     18%|#7        | 2912/16384 [00:01<00:05, 2443.00it/s]     19%|#9        | 3162/16384 [00:01<00:05, 2457.84it/s]     21%|##        | 3411/16384 [00:01<00:05, 2465.24it/s]     22%|##2       | 3661/16384 [00:01<00:05, 2472.71it/s]     24%|##3       | 3911/16384 [00:01<00:05, 2478.11it/s]     25%|##5       | 4159/16384 [00:01<00:05, 2431.47it/s]     27%|##6       | 4403/16384 [00:01<00:05, 2351.23it/s]     28%|##8       | 4643/16384 [00:01<00:04, 2363.63it/s]     30%|##9       | 4880/16384 [00:02<00:04, 2355.20it/s]     31%|###1      | 5126/16384 [00:02<00:04, 2384.20it/s]     33%|###2      | 5373/16384 [00:02<00:04, 2407.03it/s]     34%|###4      | 5617/16384 [00:02<00:04, 2413.97it/s]     36%|###5      | 5859/16384 [00:02<00:04, 2413.36it/s]     37%|###7      | 6101/16384 [00:02<00:04, 2415.07it/s]     39%|###8      | 6343/16384 [00:02<00:04, 2405.94it/s]     40%|####      | 6588/16384 [00:02<00:04, 2417.70it/s]     42%|####1     | 6837/16384 [00:02<00:03, 2438.08it/s]     43%|####3     | 7087/16384 [00:02<00:03, 2453.73it/s]     45%|####4     | 7336/16384 [00:03<00:03, 2464.02it/s]     46%|####6     | 7586/16384 [00:03<00:03, 2473.59it/s]     48%|####7     | 7836/16384 [00:03<00:03, 2478.60it/s]     49%|####9     | 8086/16384 [00:03<00:03, 2482.39it/s]     51%|#####     | 8336/16384 [00:03<00:03, 2485.94it/s]     52%|#####2    | 8586/16384 [00:03<00:03, 2489.33it/s]     54%|#####3    | 8836/16384 [00:03<00:03, 2489.62it/s]     55%|#####5    | 9086/16384 [00:03<00:02, 2490.83it/s]     57%|#####6    | 9336/16384 [00:03<00:02, 2493.12it/s]     59%|#####8    | 9586/16384 [00:03<00:02, 2450.02it/s]     60%|######    | 9832/16384 [00:04<00:02, 2407.10it/s]     61%|######1   | 10073/16384 [00:04<00:02, 2392.95it/s]     63%|######2   | 10313/16384 [00:04<00:02, 2383.82it/s]     64%|######4   | 10552/16384 [00:04<00:02, 2372.66it/s]     66%|######5   | 10790/16384 [00:04<00:02, 2364.39it/s]     67%|######7   | 11031/16384 [00:04<00:02, 2376.92it/s]     69%|######8   | 11280/16384 [00:04<00:02, 2409.21it/s]     70%|#######   | 11521/16384 [00:04<00:02, 2375.22it/s]     72%|#######1  | 11759/16384 [00:04<00:02, 2252.90it/s]     73%|#######3  | 11990/16384 [00:04<00:01, 2266.65it/s]     75%|#######4  | 12218/16384 [00:05<00:01, 2269.07it/s]     76%|#######5  | 12446/16384 [00:05<00:01, 2271.34it/s]     77%|#######7  | 12675/16384 [00:05<00:01, 2273.80it/s]     79%|#######8  | 12908/16384 [00:05<00:01, 2289.64it/s]     80%|########  | 13145/16384 [00:05<00:01, 2310.92it/s]     82%|########1 | 13377/16384 [00:05<00:01, 2309.36it/s]     83%|########3 | 13620/16384 [00:05<00:01, 2345.12it/s]     85%|########4 | 13869/16384 [00:05<00:01, 2386.45it/s]     86%|########6 | 14118/16384 [00:05<00:00, 2414.98it/s]     88%|########7 | 14365/16384 [00:05<00:00, 2429.16it/s]     89%|########9 | 14610/16384 [00:06<00:00, 2435.21it/s]     91%|######### | 14860/16384 [00:06<00:00, 2453.43it/s]     92%|#########2| 15106/16384 [00:06<00:00, 2452.74it/s]     94%|#########3| 15352/16384 [00:06<00:00, 2450.66it/s]     95%|#########5| 15598/16384 [00:06<00:00, 2441.57it/s]     97%|#########6| 15843/16384 [00:06<00:00, 2444.05it/s]     98%|#########8| 16088/16384 [00:06<00:00, 2441.17it/s]    100%|#########9| 16333/16384 [00:06<00:00, 2440.13it/s]    100%|##########| 16384/16384 [00:06<00:00, 2407.09it/s]
      0%|          | 0/16384 [00:00<?, ?it/s]      2%|1         | 246/16384 [00:00<00:06, 2454.21it/s]      3%|3         | 493/16384 [00:00<00:06, 2458.65it/s]      5%|4         | 739/16384 [00:00<00:06, 2420.40it/s]      6%|5         | 982/16384 [00:00<00:06, 2405.16it/s]      8%|7         | 1229/16384 [00:00<00:06, 2425.91it/s]      9%|9         | 1479/16384 [00:00<00:06, 2447.67it/s]     11%|#         | 1727/16384 [00:00<00:05, 2455.21it/s]     12%|#2        | 1973/16384 [00:00<00:05, 2455.78it/s]     14%|#3        | 2221/16384 [00:00<00:05, 2462.01it/s]     15%|#5        | 2470/16384 [00:01<00:05, 2468.14it/s]     17%|#6        | 2719/16384 [00:01<00:05, 2473.37it/s]     18%|#8        | 2969/16384 [00:01<00:05, 2478.47it/s]     20%|#9        | 3218/16384 [00:01<00:05, 2481.11it/s]     21%|##1       | 3467/16384 [00:01<00:05, 2483.21it/s]     23%|##2       | 3716/16384 [00:01<00:05, 2481.51it/s]     24%|##4       | 3965/16384 [00:01<00:05, 2449.64it/s]     26%|##5       | 4214/16384 [00:01<00:04, 2460.43it/s]     27%|##7       | 4464/16384 [00:01<00:04, 2469.29it/s]     29%|##8       | 4713/16384 [00:01<00:04, 2474.18it/s]     30%|###       | 4962/16384 [00:02<00:04, 2478.16it/s]     32%|###1      | 5211/16384 [00:02<00:04, 2481.00it/s]     33%|###3      | 5460/16384 [00:02<00:04, 2470.80it/s]     35%|###4      | 5708/16384 [00:02<00:04, 2462.89it/s]     36%|###6      | 5955/16384 [00:02<00:04, 2455.29it/s]     38%|###7      | 6201/16384 [00:02<00:04, 2451.96it/s]     39%|###9      | 6447/16384 [00:02<00:04, 2447.31it/s]     41%|####      | 6692/16384 [00:02<00:03, 2447.54it/s]     42%|####2     | 6937/16384 [00:02<00:03, 2443.98it/s]     44%|####3     | 7182/16384 [00:02<00:03, 2444.80it/s]     45%|####5     | 7428/16384 [00:03<00:03, 2446.44it/s]     47%|####6     | 7673/16384 [00:03<00:03, 2441.24it/s]     48%|####8     | 7918/16384 [00:03<00:03, 2408.77it/s]     50%|####9     | 8159/16384 [00:03<00:03, 2400.43it/s]     51%|#####1    | 8400/16384 [00:03<00:03, 2386.63it/s]     53%|#####2    | 8645/16384 [00:03<00:03, 2405.10it/s]     54%|#####4    | 8891/16384 [00:03<00:03, 2421.21it/s]     56%|#####5    | 9134/16384 [00:03<00:03, 2399.92it/s]     57%|#####7    | 9375/16384 [00:03<00:02, 2387.21it/s]     59%|#####8    | 9614/16384 [00:03<00:02, 2384.07it/s]     60%|######    | 9857/16384 [00:04<00:02, 2396.69it/s]     62%|######1   | 10100/16384 [00:04<00:02, 2406.12it/s]     63%|######3   | 10341/16384 [00:04<00:02, 2405.48it/s]     65%|######4   | 10584/16384 [00:04<00:02, 2410.57it/s]     66%|######6   | 10826/16384 [00:04<00:02, 2411.49it/s]     68%|######7   | 11071/16384 [00:04<00:02, 2420.59it/s]     69%|######9   | 11316/16384 [00:04<00:02, 2428.19it/s]     71%|#######   | 11560/16384 [00:04<00:01, 2430.36it/s]     72%|#######2  | 11805/16384 [00:04<00:01, 2435.38it/s]     74%|#######3  | 12049/16384 [00:04<00:01, 2435.23it/s]     75%|#######5  | 12294/16384 [00:05<00:01, 2437.84it/s]     77%|#######6  | 12542/16384 [00:05<00:01, 2450.22it/s]     78%|#######8  | 12792/16384 [00:05<00:01, 2462.92it/s]     80%|#######9  | 13039/16384 [00:05<00:01, 2444.74it/s]     81%|########1 | 13284/16384 [00:05<00:01, 2411.79it/s]     83%|########2 | 13526/16384 [00:05<00:01, 2403.43it/s]     84%|########4 | 13774/16384 [00:05<00:01, 2423.92it/s]     86%|########5 | 14019/16384 [00:05<00:00, 2430.94it/s]     87%|########7 | 14263/16384 [00:05<00:00, 2409.51it/s]     89%|########8 | 14507/16384 [00:05<00:00, 2416.83it/s]     90%|######### | 14749/16384 [00:06<00:00, 2404.90it/s]     91%|#########1| 14990/16384 [00:06<00:00, 2389.38it/s]     93%|#########2| 15229/16384 [00:06<00:00, 2380.26it/s]     94%|#########4| 15468/16384 [00:06<00:00, 2382.46it/s]     96%|#########5| 15708/16384 [00:06<00:00, 2385.61it/s]     97%|#########7| 15950/16384 [00:06<00:00, 2393.04it/s]     99%|#########8| 16190/16384 [00:06<00:00, 2394.94it/s]    100%|##########| 16384/16384 [00:06<00:00, 2430.82it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 23 minutes  2.979 seconds)


.. _sphx_glr_download_tutorials_b_high_level_simulation_plot_e_switched_capacitor_digital_control.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_e_switched_capacitor_digital_control.py <plot_e_switched_capacitor_digital_control.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_e_switched_capacitor_digital_control.ipynb <plot_e_switched_capacitor_digital_control.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
